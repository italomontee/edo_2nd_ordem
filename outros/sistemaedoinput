import numpy as np
from scipy.integrate import solve_ivp

# Função que representa o sistema de EDOs
def system_of_odes(x, y_z):
    y, z = y_z
    dydx = z
    dzdx =  2*z + 2*y
    
    return [dydx, dzdx]

# Solicitar informações do usuário
x0 = float(input("Digite o valor inicial de x: "))
y0 = float(input("Digite o valor inicial de y(x0): "))
z0 = float(input("Digite o valor inicial de dy/dx(x0): "))

x_final = float(input("Digite o valor final de x: "))

# Definir o intervalo de integração
x_span = (x0, x_final)

# Definir as condições iniciais
initial_conditions = [y0, z0]

# Resolver o sistema usando o método de Runge-Kutta de 4ª ordem
solution = solve_ivp(system_of_odes, x_span, initial_conditions, method='RK45')

# Obter os resultados
x_values = solution.t
y_values, z_values = solution.y

# Imprimir os resultados
print("\nResultados:")
for i in range(len(x_values)):
    print(f"x = {x_values[i]:.2f}, y = {y_values[i]:.6f}, z = {z_values[i]:.6f}")
