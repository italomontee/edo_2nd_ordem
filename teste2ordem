import tkinter as tk
from sympy import *
import numpy as np

def solve_runge_kutta():
    # Obter os valores informados pelo usuário
    x0 = float(x0_entry.get())
    y0 = float(y0_entry.get())
    y1_0 = float(y1_entry.get())
    h = float(h_entry.get())
    n = int(n_entry.get())
    derivative_str = derivative_entry.get()

    # Definir a variável simbólica para x, y e y1
    x, y, y1 = symbols('x y y1')

    # Definir a função f(x, y, y1) como a derivada de y1 (y'')
    derivative_expr = sympify(derivative_str)
    f = lambdify((x, y, y1), derivative_expr, modules=['numpy'])

    # Resolvendo o sistema de EDOs usando o método de Runge-Kutta
    _, y_values, y1_values, num_points = runge_kutta_4th_order(f, x0, y0, y1_0, h, x0, n)

    # O valor de y1 será o último elemento do array y1_values
    y1 = y1_values[-1]

    # Atualizar o rótulo com o valor de y1
    result_label.config(text=f"y'' = {y1:.6f}")
    points_label.config(text=f"np = {num_points}")

def runge_kutta_4th_order(f, x0, y0, y1_0, h, x_min, n):
    # Implementar o método de Runge-Kutta de quarta ordem aqui
    # Retornar os valores de x, y e y1 para o intervalo de interesse
    
    x_values = np.linspace(x_min, x_min + h*n, n+1)
    y_values = np.zeros(n+1)
    y1_values = np.zeros(n+1)

    # Definir os valores iniciais
    x_values[0] = x0
    y_values[0] = y0
    y1_values[0] = y1_0

    # Método de Runge-Kutta de quarta ordem
    for i in range(1, n+1):
        x = x_values[i - 1]
        y = y_values[i - 1]
        y1 = y1_values[i - 1]

        k1_y = h * y1
        k1_y1 = h * f(x, y, y1)

        k2_y = h * (y1 + k1_y1/2)
        k2_y1 = h * f(x + h/2, y + k1_y/2, y1 + k1_y1/2)

        k3_y = h * (y1 + k2_y1/2)
        k3_y1 = h * f(x + h/2, y + k2_y/2, y1 + k2_y1/2)

        k4_y = h * (y1 + k3_y1)
        k4_y1 = h * f(x + h, y + k3_y, y1 + k3_y1)

        y_values[i] = y + (k1_y + 2*k2_y + 2*k3_y + k4_y) / 6
        y1_values[i] = y1 + (k1_y1 + 2*k2_y1 + 2*k3_y1 + k4_y1) / 6

    return x_values, y_values, y1_values, n

# Resto do código...

# Criar a janela principal
root = tk.Tk()
root.title("Resolução de Equações Diferenciais com Runge-Kutta")

# Criar elementos da interface gráfica
x0_label = tk.Label(root, text="Digite o valor inicial de x (x0): ")
x0_label.pack()

x0_entry = tk.Entry(root)
x0_entry.pack()

y0_label = tk.Label(root, text="Digite o valor inicial de y (y0): ")
y0_label.pack()

y0_entry = tk.Entry(root)
y0_entry.pack()

y1_label = tk.Label(root, text="Digite o valor inicial de y' (y1): ")
y1_label.pack()

y1_entry = tk.Entry(root)
y1_entry.pack()

h_label = tk.Label(root, text="Digite o passo de integração (h): ")
h_label.pack()

h_entry = tk.Entry(root)
h_entry.pack()

n_label = tk.Label(root, text="Digite a quantidade de iterações (n): ")
n_label.pack()

n_entry = tk.Entry(root)
n_entry.pack()

derivative_label = tk.Label(root, text="Digite a derivada de y'' (y''): ")
derivative_label.pack()

derivative_entry = tk.Entry(root)
derivative_entry.pack()

# Botão para calcular y''
solve_button = tk.Button(root, text="Calcular y''", command=solve_runge_kutta)
solve_button.pack()

# Rótulo para mostrar o resultado final de y''
points_label = tk.Label(root, text="")
points_label.pack()

# Rótulo para mostrar o resultado final de y''
result_label = tk.Label(root, text="")
result_label.pack()

# Iniciar o loop da interface gráfica
root.mainloop()
